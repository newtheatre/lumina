[tool.poetry]
name = "lumina"
version = "0.1.0"
description = ""
authors = ["Will Pimblett <will@wjdp.uk>"]
license = "MIT"

[tool.poetry.dependencies]
python = "^3.10"
fastapi = {extras = ["all"], version = "^0.100.1"}
mangum = "^0.17.0"
pydantic = {extras = ["email"], version = "^2.1.1"}
pyhumps = "^3.5.0"
PyJWT = "^2.3.0"
cryptography = "^41.0.2"
requests = "^2.27.1"
boto3 = {extras = ["ses"], version = "^1.20.33"}
boto3-stubs = {extras = ["ses", "dynamodb"], version = "^1.20.41"}
Jinja2 = "^3.0.3"
html2text = "^2020.1.16"
PyGithub = "^1.55"
sentry-sdk = "^1.5.4"
pydantic-settings = "^2.0.2"

[tool.poetry.group.dev.dependencies]
ruff = "^0.0.280"
pytest = "^7.4.0"
uvicorn = "^0.23.1"
mypy = "^1.4.1"
freezegun = "^1.1.0"
moto = {extras = ["ses"], version = "^4.1.13"}
PyYAML = "^6.0"
pytest-vcr = "^1.0.2"
syrupy = "^4.0.8"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.mypy]
python_version = "3.10"
files = "src"
pretty = true
ignore_missing_imports = true

[tool.ruff]
select = [
    "E", # pycodestyle errors
    "F", # pyflakes
    "I", # isort
    "C90", # mccabe, complexity
    "UP", # pyupgrade
    "B", # flake8-bugbear
    "C4", # flake8-comprehensions
    # "DTZ", # flake8-datetimez
    "ICN", # flake8-import-conventions
    "ISC", # flake8-implicit-str-concat
    "INP", # flake8-no-pep420
    "PIE", # flake8-pie
    "T20", # flake8-print
    "Q", # flake8-quotes
    "RSE", # flake8-raise
    "RET", # flake8-return
    "SLF", # flake8-self
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
    "PTH", # flake8-use-pathlib
    "ERA", # eradicate
    "PL", # pylint
    "TRY", # tryceratops
    "RUF", # ruff special rules
]
ignore = [
    "TRY003", # Permit long exception messages
]

# Higher than black to give wiggle room
line-length = 120

[tool.ruff.per-file-ignores]
"bin/*" = ["INP001", "T201"]
"*/fixtures/*" = ["E501"]
"tests/*" = ["PLR2004"]

[tool.ruff.flake8-bugbear]
extend-immutable-calls = ["fastapi.Depends", "fastapi.params.Depends", "fastapi.Query",  "fastapi.Header", "fastapi.params.Query", "lumina.auth.JWTBearer"]
